name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  unit-component-test:
    name: "Unit and Component Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22]

    steps:
      - uses: actions/checkout@v4
      - name: Setup node | ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"
      - run: npm ci
      - run: npm run test:coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-node-${{ matrix.node }}
          path: ./coverage/
          if-no-files-found: warn

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: bitnami/postgresql
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: docker
          POSTGRESQL_PASSWORD: docker
          POSTGRESQL_DATABASE: apisolid

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - run: npm ci
      - run: npx prisma generate

      - run: npm run test:e2e
        env:
          JWT_SECRET: testing
          DATABASE_URL: "postgresql://docker:docker@localhost:5432/apisolid?schema=public"

  sast:
    name: "SAST Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true # Garante que erros não quebrem o pipeline

      - name: Create directory for SARIF report
        run: mkdir -p ./results

      - name: Export SAST Report
        run: |
          if [ -f ./results/results.sarif ]; then
            cp ./results/results.sarif sast-report.sarif
          else
            echo "No SARIF report generated" > sast-report.sarif
          fi

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: sast-report.sarif

  build-and-push:
    name: "Build and Push"
    runs-on: ubuntu-latest
    needs: [unit-component-test, integration-tests]

    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
      - run: npm ci

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Save tag for deployment
        run: echo "${{ steps.generate_tag.outputs.sha }}" > build-tag

      - name: Upload tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-tag-${{ github.run_id }}
          path: build-tag

      - name: Login into the container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: henriquelimadev/gc-sistematizacao:${{ steps.generate_tag.outputs.sha }},henriquelimadev/gc-sistematizacao:latest
          outputs: type=docker,dest=/tmp/gc-sistematizacao-image.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: gc-sistematizacao-docker-image
          path: /tmp/gc-sistematizacao-image.tar
          retention-days: 5

      - name: Push Docker image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: henriquelimadev/ci-cd-sistematizacao:${{ steps.generate_tag.outputs.sha }},henriquelimadev/ci-cd-sistematizacao:latest
    
  
  deploy-test:
    name: Deploy to Test Environment (EC2)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: DEPLOY
        run: echo "DEPLOYED"
  # deploy-test:
  #   name: Deploy to Test Environment (EC2)
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download tag artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-tag-${{ github.run_id }}

  #     - name: Set tag variable
  #       id: set_tag
  #       run: |
  #         TAG=$(cat build-tag)
  #         echo "sha=$TAG" >> $GITHUB_OUTPUT

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Connect to EC2 Test instance and Deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_TEST_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker pull henriquelimadev/ci-cd-sistematizacao:${{ steps.set_tag.outputs.sha }}
  #           docker stop api-container || true
  #           docker rm api-container || true
  #           docker run -d --name api-container -p 80:3000 \
  #             -e DATABASE_URL="${{ secrets.TEST_DATABASE_URL }}" \
  #             -e JWT_SECRET="${{ secrets.TEST_JWT_SECRET }}" \
  #             henriquelimadev/ci-cd-sistematizacao:${{ steps.set_tag.outputs.sha }}
            
  #           # Verificar se a aplicação está respondendo
  #           sleep 10
  #           curl -f http://localhost/health || exit 1

  approval:
    name: Manual Approval for Production
    needs: deploy-test    
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://api.suaempresa.com.br
    steps:
      - name: Awaiting approval
        run: echo "Deployment was approved manually!"

  deploy-production:
    name: Deploy to Production Environment (EC2)
    needs: approval
    runs-on: ubuntu-latest
    steps:
      - name: DEPLOY
        run: echo "DEPLOYED"

  # deploy-production:
  #   name: Deploy to Production Environment (EC2)
  #   needs: approval
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download tag artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-tag-${{ github.run_id }}

  #     - name: Set tag variable
  #       id: set_tag
  #       run: |
  #         TAG=$(cat build-tag)
  #         echo "sha=$TAG" >> $GITHUB_OUTPUT

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Connect to EC2 Production instance and Deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_PROD_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker pull henriquelimadev/ci-cd-sistematizacao:${{ steps.set_tag.outputs.sha }}
  #           docker stop api-container || true
  #           docker rm api-container || true
  #           docker run -d --name api-container -p 80:3000 \
  #             -e DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}" \
  #             -e JWT_SECRET="${{ secrets.PROD_JWT_SECRET }}" \
  #             henriquelimadev/ci-cd-sistematizacao:${{ steps.set_tag.outputs.sha }}
            
  #           # Verificar se a aplicação está respondendo
  #           sleep 10
  #           curl -f http://localhost/health || exit 1

    