name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  security-events: write
  issues: write

jobs:
  unit-component-test:
    name: "Unit and Component Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22]

    steps:
      - uses: actions/checkout@v4
      - name: Setup node | ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"
      - run: npm ci
      - run: npm run test:coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-node-${{ matrix.node }}
          path: ./coverage/
          if-no-files-found: warn

  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: bitnami/postgresql
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: docker
          POSTGRESQL_PASSWORD: docker
          POSTGRESQL_DATABASE: apisolid

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install Dependencies
        run: npm ci
  
      - name: Prisma Generate
        run: npx prisma generate
  
      - name: Run E2E Tests
        run: npm run test:integration
        env:
          JWT_SECRET: testing
          BASE_TEST_URL: ''
          DATABASE_URL: "postgresql://docker:docker@localhost:5432/apisolid?schema=public"

  sast-scan:
    name: "SAST Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true # Garante que erros não quebrem o pipeline

      - name: Create directory for SARIF report
        run: mkdir -p ./results

      - name: Export SAST Report
        run: |
          if [ -f ./results/results.sarif ]; then
            cp ./results/results.sarif sast-report.sarif
          else
            echo "No SARIF report generated" > sast-report.sarif
          fi

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: sast-report.sarif

  build-and-push:
    name: "Build and Push"
    runs-on: ubuntu-latest
    needs: [unit-component-test, integration-tests, sast-scan]
    outputs:
      image-tag: ${{ steps.generate_tag.outputs.sha }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
      - run: npm ci

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Save tag for deployment
        run: echo "${{ steps.generate_tag.outputs.sha }}" > build-tag

      - name: Upload tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-tag-${{ github.run_id }}
          path: build-tag

      - name: Login into the container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: henriquelimadev/ci-cd-sistematizacao:${{ steps.generate_tag.outputs.sha }},henriquelimadev/ci-cd-sistematizacao:latest
          

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'henriquelimadev/ci-cd-sistematizacao:${{ steps.generate_tag.outputs.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Export Docker image
        run: docker save henriquelimadev/ci-cd-sistematizacao:${{ steps.generate_tag.outputs.sha }} -o /tmp/ci-cd-sistematizacao-image.tar
    
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-cd-sistematizacao-docker-image
          path: /tmp/ci-cd-sistematizacao-image.tar
          retention-days: 5 

      - name: Push Docker image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: henriquelimadev/ci-cd-sistematizacao:${{ steps.generate_tag.outputs.sha }},henriquelimadev/ci-cd-sistematizacao:latest
    
  
  deploy-test:
    name: Deploy to Test Droplet
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      droplet_ip: ${{ steps.droplet.outputs.droplet_ip }}
      droplet_id: ${{ steps.droplet.outputs.droplet_id }}
    steps:
      - name: Download build tag artifact
        uses: actions/download-artifact@v4
        with:
          name: build-tag-${{ github.run_id }}

      - name: Read image tag
        id: get_tag
        run: |
          TAG=$(cat build-tag)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create Droplet
        id: droplet
        run: |
          DROPLET_INFO=$(doctl compute droplet create test-${{ github.run_id }} \
            --region nyc1 \
            --size s-1vcpu-1gb \
            --image docker-20-04 \
            --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_KEY_ID }} \
            --format ID,PublicIPv4 \
            --no-header \
            --wait)

          DROPLET_ID=$(echo "$DROPLET_INFO" | awk '{print $1}')
          DROPLET_IP=$(echo "$DROPLET_INFO" | awk '{print $2}')

          echo "droplet_id=$DROPLET_ID" >> $GITHUB_OUTPUT
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Criar a chave SSH
          echo "${{ secrets.DROPLET_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Aguardar um pouco para o droplet ficar totalmente disponível
          echo "Waiting for droplet to be fully ready..."        
          
          echo "Starting Connection..."
          # Adicionar o host às known_hosts
          ssh-keyscan -H ${{ steps.droplet.outputs.droplet_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true
          
          echo "Testing Connection before continue..."
          for i in {1..10}; do
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@${{ steps.droplet.outputs.droplet_ip }} "echo SSH is ready" && break
            echo "SSH not ready yet... waiting 10 seconds..."
            sleep 10
          done     

      - name: Configure Firewall  
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ steps.droplet.outputs.droplet_ip }} "ufw allow 80/tcp && ufw reload"

      - name: Pull Docker Image
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ steps.droplet.outputs.droplet_ip }} "
            docker pull henriquelimadev/ci-cd-sistematizacao:${{ steps.get_tag.outputs.tag }}
          "
           
      - name: Run Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ steps.droplet.outputs.droplet_ip }} << 'EOF'
          docker run -d --name my-app \
            -p 80:3333 \
            -e DATABASE_URL='postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PWD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_DATABASE2 }}?schema=test&sslmode=require' \
            -e NODE_ENV=test \
            -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            -e BASE_TEST_URL='http://${{ steps.droplet.outputs.droplet_ip }}' \
            henriquelimadev/ci-cd-sistematizacao:${{ steps.get_tag.outputs.tag }}
          EOF

        
      - name: Wait for Container to Initialize
        run: |
          echo "Waiting for container to initialize..."
          sleep 15
        
      - name: Check Container Status and Logs
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ steps.droplet.outputs.droplet_ip }} << 'EOF'
          echo "=== CONTAINER STATUS ==="
          docker ps -a --filter name=my-app
          echo
          echo "=== CONTAINER LOGS ==="
          docker logs my-app
          echo
          echo "=== CONTAINER INSPECT (Network) ==="
          docker inspect my-app --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'
          echo
          echo "=== TESTING INTERNAL CONNECTIVITY ==="
          curl -v http://localhost:80/ || echo "Port 80 not responding"
          echo
          echo "=== PROCESS CHECK ==="
          netstat -tlnp | grep -E ':(80|3333)' || echo "No processes listening on ports 80 or 3333"
          EOF

      - name: Wait for the application to be ready
        run: |
          echo "Waiting for app to be ready..."
          for i in {1..10}; do
            if curl -s http://${{ steps.droplet.outputs.droplet_ip }}; then
              echo "App is ready!"
              break
            else
              echo "Waiting... attempt $i"
              sleep 10
            fi
          done
  
  e2e-test-fake:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - name: Run Fake E2E Test
        run: echo "FAKE E2E TEST OK"

  
  dast-scan:
    name: Run DAST Scan
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - name: Run DAST with OWASP ZAP
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: http://${{ needs.deploy-test.outputs.droplet_ip }}
          issue_title: 'DAST SCAN'
          cmd_options: '-a'

      # - name: Upload ZAP Report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: report_html.zip
      
 
  load-test-fake:
    name: Run Load Test
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - name: Run Fake Load Test
        run: echo "FAKE LOAD TEST OK"

  destroy-droplet:
    name: Destroy Droplet
    runs-on: ubuntu-latest
    needs: [deploy-test, e2e-test-fake, dast-scan, load-test-fake]
    if: always()
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Destroy Droplet
        run: |
          doctl compute droplet delete ${{ needs.deploy-test.outputs.droplet_id }} --force

  deploy-staging:
    name: Deploy to Staging Environment (EC2)
    needs: [e2e-test-fake, dast-scan, load-test-fake]
    runs-on: ubuntu-latest
    steps:
    - name: Download build tag artifact
      uses: actions/download-artifact@v4
      with:
        name: build-tag-${{ github.run_id }}

    - name: Read image tag
      id: get_tag
      run: |
        TAG=$(cat build-tag)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Add SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DROPLET_STAGING_IP }} >> ~/.ssh/known_hosts

    - name: Pull Docker Image
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_STAGING_IP }} "
          docker pull henriquelimadev/ci-cd-sistematizacao:${{ steps.get_tag.outputs.tag }}
        "
            
    - name: Run Docker Container
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_STAGING_IP }} 
        docker stop my-app || true
        docker rm my-app || true << 'EOF'       
        docker run -d --name my-app \
          -p 80:3333 \
          -e DATABASE_URL='postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PWD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_DATABASE2 }}?schema=stage&sslmode=require' \
          -e NODE_ENV=staging \
          -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
          henriquelimadev/ci-cd-sistematizacao:${{ steps.get_tag.outputs.tag }}
        EOF


  approval:
    name: Manual Approval for Production
    needs: deploy-staging    
    runs-on: ubuntu-latest
    steps:
      - name: Download build tag artifact
        uses: actions/download-artifact@v4
        with:
          name: build-tag-${{ github.run_id }}

      - name: Read image tag
        id: get_tag
        run: |
          TAG=$(cat build-tag)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: HenriqueSydney
          timeout-minutes: 10
          minimum-approvals: 1
          issue-title: "Deploying v${{ steps.get_tag.outputs.tag }} to prod from staging"
          issue-body: "Please approve or deny the deployment of version v${{ steps.get_tag.outputs.tag }}."
          exclude-workflow-initiator-as-approver: false
          fail-on-denial: true
          additional-approved-words: ''
          additional-denied-words: ''

  deploy-production:
    name: Deploy to Production Environment (EC2)
    needs: approval
    runs-on: ubuntu-latest
    steps:
    - name: Download build tag artifact
      uses: actions/download-artifact@v4
      with:
        name: build-tag-${{ github.run_id }}

    - name: Read image tag
      id: get_tag
      run: |
        TAG=$(cat build-tag)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Add SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DROPLET_PROD_IP }} >> ~/.ssh/known_hosts

    - name: Pull Docker Image
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_PROD_IP }} "
          docker pull henriquelimadev/ci-cd-sistematizacao:${{ steps.get_tag.outputs.tag }}
        "
           
    - name: Run Docker Container
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_PROD_IP }} 
        docker stop my-app || true
        docker rm my-app || true << 'EOF'       
        docker run -d --name my-app \
          -p 80:3333 \
          -e DATABASE_URL='postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PWD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_DATABASE2 }}?schema=public&sslmode=require' \
          -e NODE_ENV=production \
          -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
          henriquelimadev/ci-cd-sistematizacao:${{ steps.get_tag.outputs.tag }}
        EOF
 